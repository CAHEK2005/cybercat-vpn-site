---
// Astro component script section (empty since we'll move all logic to client)
---

<!-- Astro component template -->
<div class="chatbot-container" id="chatbot-container" style="display: none;">
  <div class="chatbot-header">
    <h3>CyberCat VPN Support</h3>
    <button id="close-chatbot" class="close-button">Ã—</button>
  </div>
  
  <div class="chatbot-messages" id="chat-messages">
    <div id="welcome-message" class="welcome-message">
      <p>Hello! I'm your CyberCat VPN support assistant. How can I help you today?</p>
    </div>
    
    <div id="message-container"></div>
    
    <div id="loading-indicator" class="message assistant loading" style="display: none;">
      <div class="typing-indicator">
        <span></span>
        <span></span>
        <span></span>
      </div>
    </div>
    
    <div id="error-message" class="error-message" style="display: none;"></div>
  </div>
  
  <form class="chatbot-input" id="chat-form">
    <input
      type="text"
      id="chat-input"
      placeholder="Ask about CyberCat VPN configurations..."
    />
    <button type="submit" id="submit-button">
      Send
    </button>
  </form>
</div>

<button id="open-chatbot" class="chatbot-toggle-button">
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
  </svg>
</button>

<style>
  .chatbot-container {
    position: fixed;
    bottom: 100px;
    right: 30px;
    width: 350px;
    height: 500px;
    background: linear-gradient(145deg, #1a2e1a, #0f1a0f);
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    display: flex;
    flex-direction: column;
    overflow: hidden;
    border: 1px solid rgba(46, 204, 113, 0.3);
    z-index: 1000;
  }

  .chatbot-header {
    padding: 15px;
    background: rgba(0, 0, 0, 0.2);
    border-bottom: 1px solid rgba(46, 204, 113, 0.2);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .chatbot-header h3 {
    margin: 0;
    color: #fff;
    font-size: 1.2rem;
  }

  .close-button {
    background: none;
    border: none;
    color: #fff;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0 5px;
  }

  .chatbot-messages {
    flex: 1;
    padding: 15px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  .message {
    max-width: 80%;
    padding: 12px 16px;
    border-radius: 12px;
    line-height: 1.4;
    color: #fff;
    border: 1px solid transparent;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }

  .message.user {
    align-self: flex-end;
    background: rgba(46, 204, 113, 0.15);
    color: #fff;
    border-bottom-right-radius: 5px;
    border-top-right-radius: 12px;
    border: 1px solid rgba(46, 204, 113, 0.3);
    margin-left: 20%;
  }

  .message.assistant {
    align-self: flex-start;
    background: rgba(255, 255, 255, 0.05);
    color: #fff;
    border-bottom-left-radius: 5px;
    border-top-left-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    margin-right: 20%;
  }

  .message.loading {
    background: transparent;
    border: none;
  }

  .typing-indicator {
    display: flex;
    gap: 5px;
  }

  .typing-indicator span {
    width: 8px;
    height: 8px;
    background-color: #2ecc71;
    border-radius: 50%;
    display: inline-block;
    animation: bounce 1.4s infinite ease-in-out;
  }

  .typing-indicator span:nth-child(2) {
    animation-delay: 0.2s;
  }

  .typing-indicator span:nth-child(3) {
    animation-delay: 0.4s;
  }

  @keyframes bounce {
    0%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-5px); }
  }

  .welcome-message {
    color: #fff;
    text-align: center;
    margin: auto;
    padding: 20px;
  }

  .error-message {
    color: #fff;
    padding: 10px;
    text-align: center;
    background: rgba(231, 76, 60, 0.1);
    border-radius: 5px;
    margin-top: 10px;
  }

  .chatbot-input {
    display: flex;
    padding: 10px;
    background: rgba(0, 0, 0, 0.2);
    border-top: 1px solid rgba(46, 204, 113, 0.2);
  }

  .chatbot-input input {
    flex: 1;
    padding: 10px 15px;
    border: none;
    border-radius: 20px;
    background: rgba(255, 255, 255, 0.1);
    color: #fff;
    outline: none;
  }

  .chatbot-input input::placeholder {
    color: rgba(255, 255, 255, 0.6);
  }

  .chatbot-input button {
    margin-left: 10px;
    padding: 10px 20px;
    background: #2ecc71;
    color: #fff;
    border: none;
    border-radius: 20px;
    cursor: pointer;
    transition: background 0.2s;
  }

  .chatbot-input button:hover {
    background: #27ae60;
  }

  .chatbot-input button:disabled {
    background: #7f8c8d;
    cursor: not-allowed;
  }

  .chatbot-toggle-button {
    position: fixed;
    bottom: 120px;
    right: 30px;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: #2ecc71;
    color: #fff;
    border: none;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    z-index: 999;
    transition: transform 0.3s ease;
  }

  .chatbot-toggle-button:hover {
    transform: scale(1.1);
  }

  .chatbot-toggle-button svg {
    width: 24px;
    height: 24px;
  }
</style>

<!-- Client-side script -->
<script is:inline>
  const API_KEY = "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";
  const MODEL = "deepseek/deepseek-r1-distill-llama-70b:free";
  
  document.addEventListener('DOMContentLoaded', () => {
    const messageContainer = document.getElementById('message-container');
    const chatForm = document.getElementById('chat-form');
    const chatInput = document.getElementById('chat-input');
    const submitButton = document.getElementById('submit-button');
    const loadingIndicator = document.getElementById('loading-indicator');
    const errorMessage = document.getElementById('error-message');
    const welcomeMessage = document.getElementById('welcome-message');
    const chatbotContainer = document.getElementById('chatbot-container');
    const openChatbotButton = document.getElementById('open-chatbot');
    const closeChatbotButton = document.getElementById('close-chatbot');
    
    let messages = [];
    
    // Load chat history from localStorage if available
    const savedMessages = localStorage.getItem('vpnChatMessages');
    if (savedMessages) {
      messages = JSON.parse(savedMessages);
    } else {
      // Add initial message if no history exists
      messages.push({
        role: 'assistant',
        content: 'Hello! I\'m your CyberCat VPN support assistant. How can I help you today?'
      });
    }
    
    // Render initial messages
    renderMessages();
    
    // Toggle chatbot visibility
    openChatbotButton.addEventListener('click', () => {
      chatbotContainer.style.display = 'flex';
      openChatbotButton.style.display = 'none';
    });
    
    closeChatbotButton.addEventListener('click', () => {
      chatbotContainer.style.display = 'none';
      openChatbotButton.style.display = 'flex';
    });
    
    chatForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const inputValue = chatInput.value.trim();
      if (!inputValue) return;
      
      // Add user message
      const userMessage = { role: 'user', content: inputValue };
      messages.push(userMessage);
      saveMessages();
      renderMessages();
      chatInput.value = '';
      submitButton.disabled = true;
      loadingIndicator.style.display = 'block';
      errorMessage.style.display = 'none';
      
      try {
        const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${API_KEY}`,
            'Content-Type': 'application/json',
            'HTTP-Referer': window.location.href,
            'X-Title': 'CyberCat VPN Support Bot'
          },
          body: JSON.stringify({
            model: MODEL,
            messages: messages,
            temperature: 0.7,
            max_tokens: 1000
          })
        });

        if (!response.ok) {
          throw new Error(`API request failed with status ${response.status}`);
        }

        const data = await response.json();
        const botMessage = { role: 'assistant', content: data.choices[0].message.content };
        messages.push(botMessage);
        saveMessages();
      } catch (err) {
        console.error('Error:', err);
        errorMessage.textContent = 'Failed to get response. Please try again.';
        errorMessage.style.display = 'block';
      } finally {
        loadingIndicator.style.display = 'none';
        submitButton.disabled = false;
        renderMessages();
      }
    });
    
    function renderMessages() {
      if (messages.length > 1) {
        welcomeMessage.style.display = 'none';
      } else {
        welcomeMessage.style.display = 'block';
      }
      
      messageContainer.innerHTML = messages
        .filter(msg => msg.role !== 'system')
        .map((message, index) => `
          <div class="message ${message.role}">
            ${message.content}
          </div>
        `).join('');
      
      messageContainer.scrollTop = messageContainer.scrollHeight;
    }
    
    function saveMessages() {
      localStorage.setItem('vpnChatMessages', JSON.stringify(messages));
    }
  });
</script>
